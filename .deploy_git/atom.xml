<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不如跳舞 | Why Not Dance?</title>
  <subtitle>竹杖芒鞋轻胜马，一蓑烟雨任平生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Reyshawn/reyshawn.github.io/"/>
  <updated>2018-02-24T08:43:56.868Z</updated>
  <id>https://github.com/Reyshawn/reyshawn.github.io/</id>
  
  <author>
    <name>Reyshawn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codewars.com | ES5 Generators(i) 和闭包 closure </title>
    <link href="https://github.com/Reyshawn/reyshawn.github.io/2018/02/18/Codewars.com%20%7C%20ES5%20Generators(i)/"/>
    <id>https://github.com/Reyshawn/reyshawn.github.io/2018/02/18/Codewars.com | ES5 Generators(i)/</id>
    <published>2018-02-18T06:37:13.949Z</published>
    <updated>2018-02-24T08:43:56.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kata"><a href="#Kata" class="headerlink" title="Kata"></a>Kata</h2><p>Description:</p>
<p>This is the first part of three (<a href="http://www.codewars.com/kata/es5-generators-ii" target="_blank" rel="external">part2</a>, <a href="http://www.codewars.com/kata/es5-generators-iii" target="_blank" rel="external">part3</a>).</p>
<p>Generators and Iterators are new ES6 features that will allow things like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> [prev, curr] = [<span class="number">0</span>, <span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        [prev, curr] = [curr, prev + curr];</div><div class="line">        <span class="keyword">yield</span> curr;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Using them in this way, we can do amazing things:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> seq = fibonacci();</div><div class="line">print(seq.next()); <span class="comment">// 1</span></div><div class="line">print(seq.next()); <span class="comment">// 2</span></div><div class="line">print(seq.next()); <span class="comment">// 3</span></div><div class="line">print(seq.next()); <span class="comment">// 5</span></div><div class="line">print(seq.next()); <span class="comment">// 8</span></div></pre></td></tr></table></figure>
<p>This is powerful, but until a few months later, ES6 will not be born.</p>
<p>The goal of this kata is to implement pseudo-generators with ES5.</p>
<a id="more"></a>
<p>The first thing to do is to implement the generator function:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generator</span>(<span class="params">sequencer</span>) </span>&#123;</div><div class="line">   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>generator(sequencer[, arg1, arg2, …])</code> receives a sequencer function to generate the sequence and returns and object with a <code>next()</code> method. When the <code>next()</code> method is invoked, the next value is generated. The method could receive as well optional arguments to be passed to the sequencer function.</p>
<p>This is an example of a dummy sequencer:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dummySeq</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"dummy"</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To test generator(), you could use <code>dummySeq()</code> in this way:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> seq = generator(dummySeq);</div><div class="line">seq.next(); <span class="comment">// 'dummy'</span></div><div class="line">seq.next(); <span class="comment">// 'dummy'</span></div><div class="line">seq.next(); <span class="comment">// 'dummy'</span></div><div class="line">....</div></pre></td></tr></table></figure>
<p>When you’re done, you should implement the following generators (I think the functions are self explanatory):<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorialSeq</span>(<span class="params"></span>) </span>&#123;...&#125; <span class="comment">// 1, 1, 2, 6, 24, ...</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacciSeq</span>(<span class="params"></span>) </span>&#123;...&#125; <span class="comment">// 1, 1, 2, 3, 5, 8, 13, ...</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rangeSeq</span>(<span class="params">start, step</span>) </span>&#123;...&#125; <span class="comment">// rangeSeq(1, 2)  -&gt; 1, 3, 5, 7, ...</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">primeSeq</span>(<span class="params"></span>) </span>&#123;...&#125; <span class="comment">// 2, 3, 5, 7, 11, 13, ...</span></div><div class="line">partialSumSeq(<span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">0</span>) &#123;...&#125; <span class="comment">// 1, 4, 11, 13, 13, end</span></div></pre></td></tr></table></figure></p>
<p>You can use any of them in the same way:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> seq = generator(factorialSeq);</div><div class="line">seq.next(); <span class="comment">// !0 = 1</span></div><div class="line">seq.next(); <span class="comment">// !1 = 1</span></div><div class="line">seq.next(); <span class="comment">// !2 = 2</span></div><div class="line">seq.next(); <span class="comment">// !3 = 6</span></div><div class="line">seq.next(); <span class="comment">// !4 = 24</span></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>There are some sequences which are infinite and others are not. For example:</p>
<ul>
<li>primeSeq: Is infinite</li>
<li>partialSumSeq: Is limited to the passed values.</li>
</ul>
<p>When the sequence is done (in finite sequences), if you call seq.next() again, it should produce an error.</p>
<p>Good luck!</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>题目的大体含义是想要通过 ES5 来模拟 ES6 中才有的 generator 生成器功能。主要思路就是使用闭包 closure 这一特性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">generator</span>(<span class="params">sequencer</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">next</span>: sequencer.apply(<span class="keyword">this</span>,args)</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacciSeq</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> prev = <span class="number">0</span></div><div class="line">    <span class="keyword">var</span> current = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> old = current</div><div class="line">        current = prev + current</div><div class="line">        prev = old</div><div class="line">        <span class="keyword">return</span> prev</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 直接调用</span></div><div class="line"><span class="built_in">console</span>.log(fibonacciSeq()())</div><div class="line"><span class="comment">// 使用 closure</span></div><div class="line"><span class="keyword">var</span> seq = fibonacciSeq()</div><div class="line"><span class="built_in">console</span>.log(seq())</div></pre></td></tr></table></figure>
<p>关于 Closure，非常推荐阅读 Kyle Simpson 写的 <em>You Don’t Know JS: Scope &amp; Closures</em> ，不到 100 页的小册子，由浅入深，通俗易懂。Closure 简单来讲，就是在一个函数内部定义一个嵌套的子函数，并 return 它，return 这个子函数。形式就像上面代码，在 <code>fibonacciSeq()</code> 函数里 return 了一个 anonymous function，匿名函数。这样做的好处就是，把 <code>fibonacciSeq()</code> 私有变量 <code>prev</code>, <code>current</code> 保护起来，<strong>同时又能通过返回的 anonymous function 去修改函数的私有变量</strong>。听起来很绕。很实用，因为一般来讲，我们是无法在函数的外部去修改一个函数内部的私有变量的，但 closure 却可以。或者换句话，通过「在函数 A 中返回一个子函数」这样的操作，可以去修改函数 A 的私有变量。</p>
<p>这里关于 closure，主要想提及几个点：</p>
<p>一、<code>fibonacciSeq()()</code> 和 <code>seq()</code> 区别</p>
<p>二者函数的调用和执行都不同。<code>fibonacciSeq()()</code> 则是先调用函数 <code>fibonacciSeq()</code>，该函数返回一个匿名函数，再继续调用该匿名函数，得到匿名函数的返回值。所以是连续调用了两个函数，外层函数和内层函数，整个 <code>fibonacciSeq()</code> 函数中的语句都被执行了。</p>
<p>而使用 closure，首先定义变量 <code>var seq = fibonacciSeq()</code>，然后在调用 <code>seq()</code> 的过程中，仅仅调用执行了 <code>fibonacciSeq()</code> 里内部返回的的匿名函数，换句话说，在执行 <code>seq()</code> 的过程中， <code>fibonacciSeq()</code>  函数并没有被调用执行，整个过程真正调用执行的<strong>只有</strong>被嵌套的内层子函数，也就是返回的匿名函数，anonymous function。</p>
<p>这么一个简单区别就造成了，前者 <code>fibonacciSeq()()</code> 即便调用无数次，输出结果都是相同的，都是 <code>1</code>。而后者调用多次，却能够得到 Fibonacci 数列 <code>1,1,2,3,5…</code>。原因就在于 closure，虽然仅仅执行了匿名函数，但因为匿名函数是作为子函数存在于  <code>fibonacciSeq()</code>  函数内，所以根据 Lexical scope 的规则，内层函数是可以 access 到外层函数的变量的。所以在执行 <code>seq()</code> 的过程中，程序从内到外寻找变量  <code>prev</code>, <code>current</code>， 不仅在 <code>fibonacciSeq()</code>  找到了它的私有变量  <code>prev</code>, <code>current</code> ，而且还修改了它们的值！被修改了值的私有变量依旧保持在原来位置，即仍然作为函数的私有变量存在。这一点在文章 <a href="https://javascript.info/closure" target="_blank" rel="external">Closure - The Modern JavaScript Tutorial</a> 中有梗详细的解释，这里就不赘述了。</p>
<p>二、其他一些细节</p>
<p>在 <code>generator()</code> 中使用的 <code>call()</code> <code>apply()</code> 方法，主要是为了函数传参。 </p>
<ul>
<li><code>Array.prototype.slice.call(arguments, 1)</code> </li>
</ul>
<p>因为 <code>arguments</code> 是一个 array-like object，而不是真正的 array，所以无法使用 array 的诸多方法，包括 slice。<code>call()</code> 的作用就是让 <code>arguments</code> 用上 slice 方法。在这里去掉了  <code>arguments</code> 里的第一个元素，剩下元素作为一个新的 array 存储到 <code>args</code> 中。</p>
<ul>
<li><code>sequencer.apply(this,args)</code></li>
</ul>
<p>绑定 this 到 <code>sequencer</code> 并将参数 <code>args</code> 传递到函数中。</p>
<p>参考：</p>
<ul>
<li><a href="https://www.quora.com/What-are-the-reasons-to-use-return-function-in-JavaScript" target="_blank" rel="external">What are the reasons to use ‘return function’ in JavaScript? - Quora</a></li>
<li><a href="https://javascript.info/closure" target="_blank" rel="external">Closure - The Modern JavaScript Tutorial</a> ✪</li>
<li>You Don’t Know JS: Scope &amp; Closures - Kyle Simpson</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Kata&quot;&gt;&lt;a href=&quot;#Kata&quot; class=&quot;headerlink&quot; title=&quot;Kata&quot;&gt;&lt;/a&gt;Kata&lt;/h2&gt;&lt;p&gt;Description:&lt;/p&gt;
&lt;p&gt;This is the first part of three (&lt;a href=&quot;http://www.codewars.com/kata/es5-generators-ii&quot;&gt;part2&lt;/a&gt;, &lt;a href=&quot;http://www.codewars.com/kata/es5-generators-iii&quot;&gt;part3&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Generators and Iterators are new ES6 features that will allow things like this:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;fibonacci&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; [prev, curr] = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (;;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [prev, curr] = [curr, prev + curr];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; curr;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Using them in this way, we can do amazing things:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; seq = fibonacci();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(seq.next()); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(seq.next()); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(seq.next()); &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(seq.next()); &lt;span class=&quot;comment&quot;&gt;// 5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(seq.next()); &lt;span class=&quot;comment&quot;&gt;// 8&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This is powerful, but until a few months later, ES6 will not be born.&lt;/p&gt;
&lt;p&gt;The goal of this kata is to implement pseudo-generators with ES5.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="codewars" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/codewars/"/>
    
      <category term="JavaScript" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Codewars.com | Wrapped Function</title>
    <link href="https://github.com/Reyshawn/reyshawn.github.io/2018/02/12/Codewars.com%20%7C%20Wrapped%20Function/"/>
    <id>https://github.com/Reyshawn/reyshawn.github.io/2018/02/12/Codewars.com | Wrapped Function/</id>
    <published>2018-02-12T01:59:34.004Z</published>
    <updated>2018-02-13T15:07:48.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codewars-com-Wrapped-Function"><a href="#Codewars-com-Wrapped-Function" class="headerlink" title="Codewars.com | Wrapped Function"></a>Codewars.com | Wrapped Function</h1><h2 id="Kata"><a href="#Kata" class="headerlink" title="Kata"></a>Kata</h2><p>Create a function method that allow you to wrap an existing function. The method signature would look something like this:</p>
<p><strong>Usage Example</strong>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">speak = speak.wrap(<span class="function"><span class="keyword">function</span>(<span class="params">original, yourName, myName</span>)</span>&#123;</div><div class="line">   greeting = original(yourName);</div><div class="line">   <span class="keyword">return</span> greeting + <span class="string">", my name is "</span> + myName;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> greeting = speak(<span class="string">"Mary"</span>, <span class="string">"Kate"</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这个题目就是给函数扩展一个 <code>wrap</code> 方法，wrap 本意是「包裹」，这里可以理解为，在原由函数功能的基础上，再次添加新的功能，可以视为对原有函数的一种增强。在本例中，<code>speak</code> 是一个简单函数，通过 <code>wrap</code> 方法，使之在 <code>speak</code> 基础之上，增加了 greeting 的功能。</p>
<h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><h3 id="1-that-this"><a href="#1-that-this" class="headerlink" title="1. that = this"></a>1. that = this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.wrap = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg2,arg3</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> fn(that,arg2,arg3);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为 <code>wrap</code> 方法的参数是一个 callback 函数，其中 <code>original</code> 参数是要能够映射到原函数中才行。这里涉及到 <code>this</code> keyword, scope 以及函数调用的问题。</p>
<p>在 JavaScript 中，函数调用有三种情况：</p>
<ol>
<li><code>fn(arg)</code></li>
<li><code>obj.child.method(arg)</code></li>
<li><code>`fn.call(context,arg)</code></li>
</ol>
<p>但其实第三种调用方法才是最通用的书写形式，前两种都可以用第三种书写形式写出来，比如第一种，可以写成 <code>fn.call(undefined,arg)</code>， 第二种可以写成 <code>obj.child.method.call(obj.child,arg)</code> 。因此当 <code>wrap</code> 作为函数的方法被函数 <code>speak</code> 调用时，<code>this</code> 指代的为函数 <code>speak</code>。通过创建变量并赋值，将这种映射关系存储下来。</p>
<h3 id="2-bind"><a href="#2-bind" class="headerlink" title="2. bind()"></a>2. bind()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.wrap = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> callback.bind(<span class="keyword">this</span>, <span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>bind()</code> 方法首先会创建一个新函数，这个新函数的函数体和 <code>callback</code> 保持一致。 <code>bind()</code> 方法本身可能带多个参数，第一个参数用于指定 <code>this</code> 的值，之后的参数作为「预制参数」传入到新函数中。预制参数的含义可以查阅文末的参考链接。</p>
<p>而在这个例子里，<code>bind()</code> 方法的参数是两个 <code>this</code>，第一个 <code>this</code> 仅仅指定 context，因为是 <code>speak()</code> 调用的 <code>wrap()</code>，所以 <code>this</code> 就指向 <code>speak()</code>。 第二个 <code>this</code> 则作为 <code>callback</code> 函数第一个参数的预制参数，即参数 <code>original</code>。所以 <code>original</code> 表示函数 <code>speak()</code>。剩余参数则通过实参（实际调用时使用的参数）进行传入。为了便于理解其中的参数传递，可以试着做以下实验：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="string">"Hello "</span> + name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Function</span>.prototype.wrap = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> callback.bind(<span class="string">'context'</span>,<span class="keyword">this</span>, <span class="string">'s'</span>, <span class="string">'this'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">speak = speak.wrap(<span class="function"><span class="keyword">function</span>(<span class="params">original, yourName, myName</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(original,yourName,myName)</div><div class="line"></div><div class="line">   <span class="keyword">return</span> <span class="string">", my name is "</span> + myName;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(speak(<span class="string">"Mary"</span>, <span class="string">"Kate"</span>)) <span class="comment">//</span></div></pre></td></tr></table></figure>
<p>随意改变 <code>callback.bind()</code> 的参数值，查看对应的 <code>console.log(original,yourName,myName)</code> 的输出。可以找到规律，<code>bind()</code> 方法的第一个参数仅仅指定 context，对参数传递无影响。除了第一个之外的其他参数作为预制参数，影响参数传递。</p>
<p>tl;dr: </p>
<p><code>bind()</code> 方法第一个参数对应原函数( bound function )的 <code>this</code>，第二个参数对应原函数( bound function )的第一个参数，但三个参数对应原函数的第二个参数，以此类推。</p>
<h3 id="3-arrow-function"><a href="#3-arrow-function" class="headerlink" title="3. arrow function"></a>3. arrow function</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.wrap = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> f(<span class="keyword">this</span>, ...args)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>…args</code> 表明 rest paramaters，其余参数，字面意思很好理解。<code>=&gt;</code> 为 arrow function，类似 lambda 函数，这里 return 一个新函数，新函数的第一个参数值改为 <code>this</code>，其余参数作为实参传入。原理上这种方法也是类似于预制参数。</p>
<p>参考：</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this" target="_blank" rel="external">this - MDN web docs</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="external">this 的值到底是什么？一次说清楚 - 方应杭</a></li>
<li><a href="https://github.com/Aaaaaaaty/Blog/issues/1">Javascript之bind #1( 预制参数 )</a></li>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/2">JavaScript深入之从原型到原型链 #2</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters" target="_blank" rel="external">Rest parameters</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Codewars-com-Wrapped-Function&quot;&gt;&lt;a href=&quot;#Codewars-com-Wrapped-Function&quot; class=&quot;headerlink&quot; title=&quot;Codewars.com | Wrapped Function&quot;&gt;&lt;/a&gt;Codewars.com | Wrapped Function&lt;/h1&gt;&lt;h2 id=&quot;Kata&quot;&gt;&lt;a href=&quot;#Kata&quot; class=&quot;headerlink&quot; title=&quot;Kata&quot;&gt;&lt;/a&gt;Kata&lt;/h2&gt;&lt;p&gt;Create a function method that allow you to wrap an existing function. The method signature would look something like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Usage Example&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;speak&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello &quot;&lt;/span&gt; + name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;speak = speak.wrap(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;original, yourName, myName&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   greeting = original(yourName);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; greeting + &lt;span class=&quot;string&quot;&gt;&quot;, my name is &quot;&lt;/span&gt; + myName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; greeting = speak(&lt;span class=&quot;string&quot;&gt;&quot;Mary&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Kate&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="codewars" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/codewars/"/>
    
      <category term="JavaScript" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Codewars.com | Catching Car Mileage Numbers</title>
    <link href="https://github.com/Reyshawn/reyshawn.github.io/2018/02/10/Codewars.com-%7C-Catching-Car-Mileage-Numbers/"/>
    <id>https://github.com/Reyshawn/reyshawn.github.io/2018/02/10/Codewars.com-|-Catching-Car-Mileage-Numbers/</id>
    <published>2018-02-10T02:38:00.740Z</published>
    <updated>2018-02-10T02:50:30.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codewars-com-Catching-Car-Mileage-Numbers"><a href="#Codewars-com-Catching-Car-Mileage-Numbers" class="headerlink" title="Codewars.com | Catching Car Mileage Numbers"></a>Codewars.com | <a href="https://www.codewars.com/kata/52c4dd683bfd3b434c000292" target="_blank" rel="external">Catching Car Mileage Numbers</a></h1><h2 id="Kata"><a href="#Kata" class="headerlink" title="Kata"></a>Kata</h2><blockquote>
<p>  “7777…<em>8?!??!</em>“, exclaimed Bob, “I missed it again! Argh!” Every time there’s an interesting number coming up, he notices and then promptly forgets. Who <em>doesn’t</em> like catching those one-off interesting mileage numbers?</p>
</blockquote>
<p>Let’s make it so Bob <strong>never</strong> misses another interesting number. We’ve hacked into his car’s computer, and we have a box hooked up that reads mileage numbers. We’ve got a box glued to his dash that lights up yellow or green depending on whether it receives a <code>1</code> or a <code>2</code> (respectively).</p>
<p>It’s up to you, intrepid warrior, to glue the parts together. Write the function that parses the mileage number input, and returns a <code>2</code> if the number is “interesting” (see below), a <code>1</code> if an interesting number occurs within the next two miles, or a <code>0</code> if the number is not interesting.</p>
<p><strong>Note:</strong> In Haskell, we use <code>No</code>, <code>Almost</code> and <code>Yes</code> instead of <code>0</code>, <code>1</code> and <code>2</code>.</p>
<p> <strong>“Interesting” Numbers</strong></p>
<p>Interesting numbers are 3-or-more digit numbers that meet one or more of the following criteria:</p>
<ul>
<li>Any digit followed by all zeros: <code>100</code>, <code>90000</code></li>
<li>Every digit is the same number: <code>1111</code></li>
<li>The digits are sequential, incementing†: <code>1234</code></li>
<li>The digits are sequential, decrementing‡: <code>4321</code></li>
<li>The digits are a palindrome: <code>1221</code> or <code>73837</code></li>
<li>The digits match one of the values in the <code>awesomePhrases</code> array</li>
</ul>
<blockquote>
<p>  † For incrementing sequences, <code>0</code> should come after <code>9</code>, and not before  <code>1</code>, as in <code>7890</code>.<br>  ‡ For decrementing sequences, <code>0</code> should come after <code>1</code>, and not before  <code>9</code>, as in <code>3210</code>.</p>
</blockquote>
<p>So, you should expect these inputs and outputs:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// "boring" numbers</span></div><div class="line">isInteresting(<span class="number">3</span>, [<span class="number">1337</span>, <span class="number">256</span>]);    <span class="comment">// 0</span></div><div class="line">isInteresting(<span class="number">3236</span>, [<span class="number">1337</span>, <span class="number">256</span>]); <span class="comment">// 0</span></div><div class="line"></div><div class="line"><span class="comment">// progress as we near an "interesting" number</span></div><div class="line">isInteresting(<span class="number">11207</span>, []); <span class="comment">// 0</span></div><div class="line">isInteresting(<span class="number">11208</span>, []); <span class="comment">// 0</span></div><div class="line">isInteresting(<span class="number">11209</span>, []); <span class="comment">// 1</span></div><div class="line">isInteresting(<span class="number">11210</span>, []); <span class="comment">// 1</span></div><div class="line">isInteresting(<span class="number">11211</span>, []); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">// nearing a provided "awesome phrase"</span></div><div class="line">isInteresting(<span class="number">1335</span>, [<span class="number">1337</span>, <span class="number">256</span>]); <span class="comment">// 1</span></div><div class="line">isInteresting(<span class="number">1336</span>, [<span class="number">1337</span>, <span class="number">256</span>]); <span class="comment">// 1</span></div><div class="line">isInteresting(<span class="number">1337</span>, [<span class="number">1337</span>, <span class="number">256</span>]); <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p><strong>Error Checking</strong></p>
<ul>
<li>A number is only interesting if it is greater than <code>99</code>!</li>
<li>Input will <em>always</em> be an integer greater than <code>0</code>, and less than <code>1,000,000,000</code>. </li>
<li>The <code>awesomePhrases</code> array will always be provided, and will always be an array, but may be empty. (Not <em>everyone</em> thinks numbers spell funny words…)</li>
<li>You should only ever output <code>0</code>, <code>1</code>, or <code>2</code>.</li>
</ul>
<a id="more"></a>
<hr>
<h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>题目很长，但总结起来，无非就是输入一个 number 类型的数据，检查是否符合上述列出的所谓「interesting number」的规则，按照规则输出 0，1 或 2。以下是自己看到的一个非常简洁的答案，答案来自 <a href="https://www.codewars.com/users/laoris" target="_blank" rel="external">laoris</a>, <a href="https://www.codewars.com/users/jwong483" target="_blank" rel="external">jwong483</a>, <a href="https://www.codewars.com/users/Marlen" target="_blank" rel="external">Marlen</a>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isInteresting</span>(<span class="params">number, awesomePhrases</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tests = [</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> <span class="regexp">/^\d00+$/</span>.test(n); &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> <span class="regexp">/^(\d)\1+$/</span>.test(n); &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">RegExp</span>(n).test(<span class="number">1234567890</span>); &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">RegExp</span>(n).test(<span class="number">9876543210</span>); &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> n + <span class="string">''</span> == (n + <span class="string">''</span>).split(<span class="string">''</span>).reverse().join(<span class="string">''</span>); &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123; <span class="keyword">return</span> awesomePhrases.some(<span class="function"><span class="keyword">function</span>(<span class="params">p</span>) </span>&#123; <span class="keyword">return</span> p == n; &#125;); &#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  <span class="keyword">var</span> interesting = <span class="number">0</span>;</div><div class="line">  tests.some(<span class="function"><span class="keyword">function</span>(<span class="params">test</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (number &gt; <span class="number">99</span> &amp;&amp; test(number))</div><div class="line">      <span class="keyword">return</span> interesting = <span class="number">2</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((number &gt; <span class="number">98</span> &amp;&amp; test(number + <span class="number">1</span>)) || (number &gt; <span class="number">97</span> &amp;&amp; test(number + <span class="number">2</span>)))</div><div class="line">      interesting = <span class="number">1</span>;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> interesting;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个答案在代码结构上很厉害的一点在于，使用了 <code>some()</code> 这个函数，以及加上完全由函数组成的 array 数组，来进行给定规则的检验。 <code>some()</code> 方法主要用于测试数组中某些元素。用法就是在方法 <code>some()</code> 中定义一个 callback 回调函数，数组中的每一个元素作为回调函数的参数依次传入到回调函数中（回调函数的意思就是函数作为函数的参数，这里有点儿绕） 。</p>
<p>在这个例子里，<code>tests</code> 是事先定义好的数组，数组的每一个元素都是一个函数。对这个数组使用 <code>some()</code> 方法，在其中定义了一个回调函数，形如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tests.some(<span class="function"><span class="keyword">function</span>(<span class="params">test</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>（number &gt; <span class="number">99</span> &amp;&amp; test(number))&#123;</div><div class="line">        <span class="comment">// code here</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//code here</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在实际执行过程中，<code>tests</code> 中的每一个元素 element，都会作为回调函数的参数 <code>test</code> 传递进回调函数中。因为 <code>tests</code>  数组里的元素都是函数，所以这里使用参数  <code>test</code>  时也是把它当作函数来使用的。因此才会看到有 <code>test(number)</code> 这样的语句。</p>
<p>关于 <code>some()</code> 方法，MDN 上给了一个更加简单的例子，来帮助理解这其中的参数传导：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (element &gt;= <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> passed = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBigEnough);</div><div class="line"><span class="comment">// passed is false</span></div><div class="line">passed = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBigEnough);</div><div class="line"><span class="comment">// passed is true</span></div></pre></td></tr></table></figure>
<p>明白了整个算法的结构，其实在 <code>tests</code> 中定义的检测函数，也都非常巧妙。 </p>
<ul>
<li>形如 [1234, 8765] 这类数，把被检测数转化成 <code>RegExp</code> 逆向使用正则表达式；</li>
<li><code>n+&#39;&#39;</code> 把数字转化成数组；</li>
<li>检测 palindrome 回文数，使用 <code>reverse()</code> 方法，判断反转后是否相等。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Codewars-com-Catching-Car-Mileage-Numbers&quot;&gt;&lt;a href=&quot;#Codewars-com-Catching-Car-Mileage-Numbers&quot; class=&quot;headerlink&quot; title=&quot;Codewars.com | Catching Car Mileage Numbers&quot;&gt;&lt;/a&gt;Codewars.com | &lt;a href=&quot;https://www.codewars.com/kata/52c4dd683bfd3b434c000292&quot;&gt;Catching Car Mileage Numbers&lt;/a&gt;&lt;/h1&gt;&lt;h2 id=&quot;Kata&quot;&gt;&lt;a href=&quot;#Kata&quot; class=&quot;headerlink&quot; title=&quot;Kata&quot;&gt;&lt;/a&gt;Kata&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;  “7777…&lt;em&gt;8?!??!&lt;/em&gt;“, exclaimed Bob, “I missed it again! Argh!” Every time there’s an interesting number coming up, he notices and then promptly forgets. Who &lt;em&gt;doesn’t&lt;/em&gt; like catching those one-off interesting mileage numbers?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s make it so Bob &lt;strong&gt;never&lt;/strong&gt; misses another interesting number. We’ve hacked into his car’s computer, and we have a box hooked up that reads mileage numbers. We’ve got a box glued to his dash that lights up yellow or green depending on whether it receives a &lt;code&gt;1&lt;/code&gt; or a &lt;code&gt;2&lt;/code&gt; (respectively).&lt;/p&gt;
&lt;p&gt;It’s up to you, intrepid warrior, to glue the parts together. Write the function that parses the mileage number input, and returns a &lt;code&gt;2&lt;/code&gt; if the number is “interesting” (see below), a &lt;code&gt;1&lt;/code&gt; if an interesting number occurs within the next two miles, or a &lt;code&gt;0&lt;/code&gt; if the number is not interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In Haskell, we use &lt;code&gt;No&lt;/code&gt;, &lt;code&gt;Almost&lt;/code&gt; and &lt;code&gt;Yes&lt;/code&gt; instead of &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;“Interesting” Numbers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Interesting numbers are 3-or-more digit numbers that meet one or more of the following criteria:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any digit followed by all zeros: &lt;code&gt;100&lt;/code&gt;, &lt;code&gt;90000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Every digit is the same number: &lt;code&gt;1111&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The digits are sequential, incementing†: &lt;code&gt;1234&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The digits are sequential, decrementing‡: &lt;code&gt;4321&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The digits are a palindrome: &lt;code&gt;1221&lt;/code&gt; or &lt;code&gt;73837&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The digits match one of the values in the &lt;code&gt;awesomePhrases&lt;/code&gt; array&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;  † For incrementing sequences, &lt;code&gt;0&lt;/code&gt; should come after &lt;code&gt;9&lt;/code&gt;, and not before  &lt;code&gt;1&lt;/code&gt;, as in &lt;code&gt;7890&lt;/code&gt;.&lt;br&gt;  ‡ For decrementing sequences, &lt;code&gt;0&lt;/code&gt; should come after &lt;code&gt;1&lt;/code&gt;, and not before  &lt;code&gt;9&lt;/code&gt;, as in &lt;code&gt;3210&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, you should expect these inputs and outputs:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;boring&quot; numbers&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;]);    &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;3236&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// progress as we near an &quot;interesting&quot; number&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;11207&lt;/span&gt;, []); &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;11208&lt;/span&gt;, []); &lt;span class=&quot;comment&quot;&gt;// 0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;11209&lt;/span&gt;, []); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;11210&lt;/span&gt;, []); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;11211&lt;/span&gt;, []); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// nearing a provided &quot;awesome phrase&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;1335&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;1336&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;isInteresting(&lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;, [&lt;span class=&quot;number&quot;&gt;1337&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;]); &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Error Checking&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A number is only interesting if it is greater than &lt;code&gt;99&lt;/code&gt;!&lt;/li&gt;
&lt;li&gt;Input will &lt;em&gt;always&lt;/em&gt; be an integer greater than &lt;code&gt;0&lt;/code&gt;, and less than &lt;code&gt;1,000,000,000&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;awesomePhrases&lt;/code&gt; array will always be provided, and will always be an array, but may be empty. (Not &lt;em&gt;everyone&lt;/em&gt; thinks numbers spell funny words…)&lt;/li&gt;
&lt;li&gt;You should only ever output &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, or &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="codewars" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/codewars/"/>
    
      <category term="JavaScript" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 部署到新电脑</title>
    <link href="https://github.com/Reyshawn/reyshawn.github.io/2017/11/02/Hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/"/>
    <id>https://github.com/Reyshawn/reyshawn.github.io/2017/11/02/Hexo部署到新电脑/</id>
    <published>2017-11-02T14:53:17.000Z</published>
    <updated>2017-11-03T15:14:47.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-部署到新电脑"><a href="#Hexo-部署到新电脑" class="headerlink" title="Hexo 部署到新电脑"></a>Hexo 部署到新电脑</h1><p>换了新的电脑，想把在 hexo 上的部署文件转移到新电脑上。因为提前在 github 为此做了一些工作，就是按照网上一些朋友的建议，在 github 上创建两个分支，一个分支 「master」 用于 hexo 部署，另一个分支「hexo」用于存储源文件。这样当需要在一台新电脑上使用 hexo 时，只需要把源文件 clone 到本地就行了。但事情总不是一帆风顺😅。今天遇到的问题是，把源文件拉到本地以后，每次执行 <code>hexo d</code> 部署， 都会把所有源文件都部署到 <code>master</code> 分支上。按照常理，应该是只有 public 文件夹里的内容才会放在 <code>master</code> 分支下的。</p>
<a id="more"></a>
<p>在网上找了很多解决方案，最终认为还是 cache 出了问题。但只是去 <code>hexo clean</code> 并不起效。</p>
<p>解决办法：</p>
<p>首先是检查，github.io 仓库下默认分支是哪个，这里要把默认分支改成存储源文件的那个分支。在我的仓库下就是把默认分支改成 「hexo」。</p>
<p>再者，就是 <code>hexo clean</code>，然后把目录下的 <code>.deploy_git</code> 删掉。然后再重新进行 <code>hexo generate</code> 和 <code>hexo deploy</code>。成功！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hexo-部署到新电脑&quot;&gt;&lt;a href=&quot;#Hexo-部署到新电脑&quot; class=&quot;headerlink&quot; title=&quot;Hexo 部署到新电脑&quot;&gt;&lt;/a&gt;Hexo 部署到新电脑&lt;/h1&gt;&lt;p&gt;换了新的电脑，想把在 hexo 上的部署文件转移到新电脑上。因为提前在 github 为此做了一些工作，就是按照网上一些朋友的建议，在 github 上创建两个分支，一个分支 「master」 用于 hexo 部署，另一个分支「hexo」用于存储源文件。这样当需要在一台新电脑上使用 hexo 时，只需要把源文件 clone 到本地就行了。但事情总不是一帆风顺😅。今天遇到的问题是，把源文件拉到本地以后，每次执行 &lt;code&gt;hexo d&lt;/code&gt; 部署， 都会把所有源文件都部署到 &lt;code&gt;master&lt;/code&gt; 分支上。按照常理，应该是只有 public 文件夹里的内容才会放在 &lt;code&gt;master&lt;/code&gt; 分支下的。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>I/O #22: 端午</title>
    <link href="https://github.com/Reyshawn/reyshawn.github.io/2017/05/31/I-O-22-%E7%AB%AF%E5%8D%88/"/>
    <id>https://github.com/Reyshawn/reyshawn.github.io/2017/05/31/I-O-22-端午/</id>
    <published>2017-05-31T15:59:17.000Z</published>
    <updated>2017-11-03T14:35:28.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-O-21-端午"><a href="#I-O-21-端午" class="headerlink" title="I/O #21: 端午"></a>I/O #21: 端午</h1><h2 id="关于端午的几段记忆"><a href="#关于端午的几段记忆" class="headerlink" title="关于端午的几段记忆"></a>关于端午的几段记忆</h2><p>其实现在想想，最后悔的大概是大学本科时代，没有像现在这样，对时间规划，时间管理有非常深的思考，没有在本科就把英文学得足够的好，没有在大一大二就开始接触播客，开始阅读英文教材。我每次站在现在去回望过去，都总会觉得过去的自己幼稚到不行，很难想象过去的自己在看着过去的过去的时候，也是一样的想法。</p>
<p>时值端午。如果不是在社交网络上看到些许的关键词，远离中文社会很长时间的我是感受不到任何节日的气息的。我想分享几段个人关于端午的几段记忆，或许也是，关于端午我能想起来的全部事情。<br><a id="more"></a><br>记忆里所有关于端午的记忆，除去那篇『离骚』，总是和吃粽子有关。赛龙舟， 悬艾叶配香囊，在我们那个小地方都是见不到的。一般的粽子也都不是自家制作，都是购自街边的小摊贩。摊贩上一般是放一个盆，盆里盛着温水，盆上堆满一个个包好的粽子，都只有一种口味。那时候小学放学，步行回家，端午时节就有这些卖粽子的摊贩出现，有时候是母亲，有时候是自己，会去那里买一两个粽子来，摊主会把外面的艾叶取掉，然后是把一个不带艾叶的粽子用塑料袋装起来，就这样掂回家。在家中把没有艾叶的粽子放到盘子里，洒上白糖，就直接拿着勺子吃了。这在当时实在不是什么稀罕的食物，直到我可能离家很久之后吧。后来就有了速冻的粽子，记忆里比较深刻的是三全出过的一款「龙舟粽」，当时的他们的广告词我现在都还记得。有了速冻粽子之后，街边卖粽子的摊贩就很少了。也可能是我上了初中后，骑车上下学，对周围的事物不怎么留心了吧。后来的这种速冻粽子，经常冷不丁出现在家里的餐桌上，一年四季，并不是只有端午才能吃到了。通常是早餐，母亲煮粥的时候，会馏一个小粽子，或者咸鸭蛋。再者就是晚餐的时候，早上或者之前没有吃的会继续馏，直到一个粽子会被馏了很多次，表面的艾草颜色都有些斑驳了，因为每次都被人遗忘。</p>
<p>高中就已经离家在外了。当时学业压力很重。三年一心做题，都没怎么关注过窗外事吧。每日的三餐都是在高中学校的食堂，除了周末能够去躺姥姥姥爷家，能吃几顿好吃的。端午那天，食堂的窗口会专门卖粽子，自己当时也会去买一个来吧，口味什么的都不重要了，只是作为一种节日上的重要的仪式吧。上了大学，大学第一年，二〇一二年，离第一代 iPhone 发布已经过去了五年时间，然而移动互联网还依然在风口。 当年拥有了第一款智能手机，也是从高中解放之后，进入大学总是一直在关注窗外事吧。也许是移动互联网兴起的缘故，这一年的端午节，突然就出现了「咸粽子」，并且在网上有了粽子版本的「甜咸之争」。而对于我从小都是吃的甜粽子长大的人，无疑是非常颠覆的。我在想，一定是移动互联网的兴起，才能让这样的「甜咸之争」迅速的传播。在以前，可能只是有少部分人同时知道甜粽子和咸粽子的存在。大部分一辈子只是生活在北方，或者大部分一辈子只是生活在南方的人，他们一辈子见到的粽子，可能就只有一种。哪怕其中的几个人偶然接触到了另一种的粽子，如果仅凭几个人之力，也是无法达到尽人皆知的社会性事件的。我上大学的第二年才第一次尝了咸粽子，肉馅的粽子。那时已经到了二〇一四年了，当时是在新校区的最后一个学期，那个学期自己要应付很多事情，学生会的工作，社团的排练，微软方面的任务，当时还在追求一个女生，所以成绩上几乎的大范围的溃败。这种溃败甚至已经波及到了体育课。我体育课选择的是篮球，在最后的上篮考试中成绩很差，需要在下一节课重新测试。于是我就只好在周内找一个时间去操场练球，当时叫了一个同学，也是大学难得的能聊得来的同学吧。叫他过来帮我传球，然后我接球三步上篮。这样练习了很久，都累了，旁边是「星天苑」的餐厅，我去那里买了俩粽子，其中一个买了一个肉馅的。这个肉馅的粽子一直被放到晚上十点，我回到寝室才把它吃了。嗯，那是第一次吃咸粽子。</p>
<p>今年是二〇一七年，距离第一代 iPhone 发布都已经过去十年了。我兜兜转转已经毕业。毕业之后的一年里，没有找工作，没有读研究生，没有谈恋爱，没有旅行，也没有待在家里。跟很多好朋友，同学，朋友，也没能够频繁的保持联系。因为对门的张叔刚从国内回来，中午煮了四个粽子，他自己吃掉两个，给我留了两个。就在几个小时前，我自己其实有蒸好米饭，热了一个小菜，是中午去超市时买的。但米饭只吃了一点。把张叔留的两个粽子有在锅里煮了一下。第一个是咸粽子，夹的有蛋黄和牛肉，第二个是甜的，夹的是红枣。也是在剥去艾叶的时候，才突然想到从小到大的这些事情，才想起来把这些事情记下来。时值端午，如果不是在社交网络看到的些许关键词，我应该是不会意识到端午节的。今日在 twitter 上的 <a href="https://twitter.com/hao520" target="_blank" rel="external">Chih-Hao Tsai</a> 这样写道：</p>
<blockquote>
<p>年節食俗可以休矣。我們早已過了那個平日吃不飽、過節吃到飽的時代。行為抽離原本的脈絡就蠢了。何不重建新習俗，例如運動，為節日帶來更多價值。</p>
</blockquote>
<p>可是，年节带来的远非饭桌上的食物。更是一个端由，能想起一些事情的端由，能约上心仪女子的一个端由，能够自我反思的端由，以及偷的半日清闲的端由。当我真的想着顺着「端午」这条线往前捋的时候，一个非常恐怖的事情是，大概十年前的事情都已经记得非常不清楚了，再久远些，十五年前，已经是完全模糊到什么也看不清了。这种模糊带来的可能就是看老照片时候的陌生和惊喜感，而当时拍下那一张张照片时自己当时的所思所想，已无法回溯。而文首提到的，每当我站在现在去观望过去的自己，总是觉得过去幼稚的不行。但有时候，幼稚也是感动，成熟也是妥协。</p>
<hr>
<h2 id="目前的状态以及之后的计划"><a href="#目前的状态以及之后的计划" class="headerlink" title="目前的状态以及之后的计划"></a>目前的状态以及之后的计划</h2><p>目前的个人状态还是很棒的，至少在时间管理的问题上，解决过去一两年自己都没能解决的问题。而且能真实的感到自己对时间的利用率成倍的增加。而未来的几个月，七月，八月，想把本科所学的东西好好整理整理，不想一毕业就把东西还给老师，最近找到了很多不错的外文教材，想借着这三个月时间好好读一读，把一些忘掉的知识，柯西，拉普拉斯等等都拾起来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;I-O-21-端午&quot;&gt;&lt;a href=&quot;#I-O-21-端午&quot; class=&quot;headerlink&quot; title=&quot;I/O #21: 端午&quot;&gt;&lt;/a&gt;I/O #21: 端午&lt;/h1&gt;&lt;h2 id=&quot;关于端午的几段记忆&quot;&gt;&lt;a href=&quot;#关于端午的几段记忆&quot; class=&quot;headerlink&quot; title=&quot;关于端午的几段记忆&quot;&gt;&lt;/a&gt;关于端午的几段记忆&lt;/h2&gt;&lt;p&gt;其实现在想想，最后悔的大概是大学本科时代，没有像现在这样，对时间规划，时间管理有非常深的思考，没有在本科就把英文学得足够的好，没有在大一大二就开始接触播客，开始阅读英文教材。我每次站在现在去回望过去，都总会觉得过去的自己幼稚到不行，很难想象过去的自己在看着过去的过去的时候，也是一样的想法。&lt;/p&gt;
&lt;p&gt;时值端午。如果不是在社交网络上看到些许的关键词，远离中文社会很长时间的我是感受不到任何节日的气息的。我想分享几段个人关于端午的几段记忆，或许也是，关于端午我能想起来的全部事情。&lt;br&gt;
    
    </summary>
    
      <category term="I/O" scheme="https://github.com/Reyshawn/reyshawn.github.io/categories/I-O/"/>
    
    
      <category term="回忆" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>I/O #21: Habitica 的量化人生</title>
    <link href="https://github.com/Reyshawn/reyshawn.github.io/2017/04/15/I-O-21-Habitica%20%E7%9A%84%E9%87%8F%E5%8C%96%E4%BA%BA%E7%94%9F/"/>
    <id>https://github.com/Reyshawn/reyshawn.github.io/2017/04/15/I-O-21-Habitica 的量化人生/</id>
    <published>2017-04-15T15:06:27.000Z</published>
    <updated>2017-11-03T14:35:28.882Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/04/15/I-O-21-Habitica%20的量化人生/intro.jpg" alt="intro.jpg" title="">
<p><br><br>从去年十二月开始，自己一直在使用一款效率软件 Habitica 来进行管理生活。本来我已经对所有 to-do 类的效率应用都失去信心了。Habitica 别出心裁的「游戏化」概念真的戳中痛点。这也是它能够在众多效率类应用中有着明显区分度的原因。而在使用了几个月之后，我发现这种「游戏化」是一种很好的量化工具。它把你生活中大大小小的事件，量化为不同的价值。这样的价值则是通过「经验」、「金币」、「魔法值」、「生命值」来进行体现的。<br><a id="more"></a></p>
<h2 id="量化机制"><a href="#量化机制" class="headerlink" title="量化机制"></a>量化机制</h2><p>Habitica 的量化系统里有四个关键要素：</p>
<ul>
<li>生命值</li>
<li>经验</li>
<li>魔法值</li>
<li>金币</li>
</ul>
<img src="/2017/04/15/I-O-21-Habitica%20的量化人生/value1.PNG" alt="value1.PNG" title="">
<p><br><br><img src="/2017/04/15/I-O-21-Habitica%20的量化人生/value2.PNG" alt="value2.PNG" title=""><br><br><br>在 Habitica 的设定中，生命值永远都是 50，而升级所需要的经验值，则随着等级的增加而增加。因为升级补满生命值，而当生命值耗完，就会被降一级，并且丢失所有金币，以及随机丢失一些装备。这样下来，随着等级的增加，每升一级所需的经验值就越高，而生命值是不变的，这样难度是逐渐增加的。</p>
<p>「生命值」可以理解为短期内的生活状态，如果短期内，生命值一直保持满血，未受到任何伤害，可以认为在最近一段时间内，在工作，学习或生活中保持一个比较高的效率。</p>
<img src="/2017/04/15/I-O-21-Habitica%20的量化人生/exp.png" alt="exp.png" title="">
<p><br><br>「经验值」可以反映一个较长时间段内工作状态变化。因为每天经验值都会增加，每天增加的量都是不一样的。有时候因为耗完「生命值」，「经验值」也会下降。这样通过观察「经验值-时间」曲线，就可以得出一段较长时间内工作学习效率的变化情况，并根据曲线适时进行调整。这样的工作状态是通过曲线的斜率反映出来的。斜率 $ k=\Delta Exp/\Delta t $ 的值越大，则表示该时间点 (更准确是当日) 的工作状态，效率越高。</p>
<p>「魔法值」这一要素只有在触发技能时候才会起作用。而技能又与职业挂钩。Habitica 在十级以后又四个职业可以选，每种职业侧重不同，但都是为增加游戏化的趣味性。包括设计出 boss 战系统，各式装备。理论上都是游戏化中很重要的一环，但是本文主要讨论其中的「量化」概念，所以在此略过。</p>
<p>「金币」这一要素是和 Habitica 里的奖励系统 ( Reward ) 有关联的。所以「金币」这一量其实是联系努力和休息消遣的重要桥梁。譬如我今天读了 30 页的书，获得 10 枚金币，而这 10 枚金币在奖励系统里刚好可以让我刷半个小时的微博。透过 Habitica 里的「金币」概念真正让你生活中经历的种种事件，有了具体的价值。当然，我们讨论价值，永远都在讨论它的相对意义，而非绝对意义。因为讨论一个事件价值的绝对意义就上升到了哲学领域。</p>
<h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>以下简单说一下几个我在实践 Habitica 里碰到的几个问题</p>
<p><strong>如何定义事件，习惯，怎样标记习惯的完成?</strong><br><br>在「习惯系统」里，我们往往要定义一件通用性的事件来作为习惯。当然可以通过定义阅读 10 页来作为一个习惯，而我一般通过时间来进行量化。比如写作，则根据写作的时长，定义每二十分钟记一次正向习惯，这样根据写作投入的时长来获取等量的报酬，经验，金币。同理，在设置「学习」，「阅读」习惯时也是一样。</p>
<p><strong>在奖励系统里如何定义  Reward?</strong><br><br>我最初几乎对每一个休息消遣的事件，都定义一个 Reward，比如刷微博 10 金币，刷朋友圈 5 金币，看电影 30 金币。这样一下定义了七八个事件，而且还是有很多事件没有覆盖掉。甚至有时候，我可能又刷微博，又刷朋友圈。在实践中并不好处理。而我希望我的系统要尽量简化。所以我把上述事件全部去掉，只添加两个 Reward，，依旧通过时间进行量化，一个写作「劳逸结合」，规定 10 金币休息 25 分钟，25 分钟内可以做任何想做的事情。另一个写作「要颓废了」，规定 50 金币休息 150 分钟。</p>
<img src="/2017/04/15/I-O-21-Habitica%20的量化人生/Reward.png" alt="Reward.png" title="">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/04/15/I-O-21-Habitica%20的量化人生/intro.jpg&quot; alt=&quot;intro.jpg&quot; title=&quot;&quot;&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;从去年十二月开始，自己一直在使用一款效率软件 Habitica 来进行管理生活。本来我已经对所有 to-do 类的效率应用都失去信心了。Habitica 别出心裁的「游戏化」概念真的戳中痛点。这也是它能够在众多效率类应用中有着明显区分度的原因。而在使用了几个月之后，我发现这种「游戏化」是一种很好的量化工具。它把你生活中大大小小的事件，量化为不同的价值。这样的价值则是通过「经验」、「金币」、「魔法值」、「生命值」来进行体现的。&lt;br&gt;
    
    </summary>
    
      <category term="I/O" scheme="https://github.com/Reyshawn/reyshawn.github.io/categories/I-O/"/>
    
    
      <category term="Habitica" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/Habitica/"/>
    
  </entry>
  
  <entry>
    <title>I/O #20: 「有目标，能坚持！」</title>
    <link href="https://github.com/Reyshawn/reyshawn.github.io/2017/01/05/I-O-20-%E3%80%8C%E6%9C%89%E7%9B%AE%E6%A0%87%EF%BC%8C%E8%83%BD%E5%9D%9A%E6%8C%81%EF%BC%81%E3%80%8D/"/>
    <id>https://github.com/Reyshawn/reyshawn.github.io/2017/01/05/I-O-20-「有目标，能坚持！」/</id>
    <published>2017-01-05T12:23:15.000Z</published>
    <updated>2017-11-03T14:35:28.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-O-20-「有目标，能坚持！」"><a href="#I-O-20-「有目标，能坚持！」" class="headerlink" title="I/O #20: 「有目标，能坚持！」"></a>I/O #20: 「有目标，能坚持！」</h1><p><em>2017.1.5</em></p>
<h2 id="碎片式学习"><a href="#碎片式学习" class="headerlink" title="碎片式学习"></a>碎片式学习</h2><p>最近花了￥30买了 Reeder，一个 RSS 阅读应用。用起来，左划右划的快捷操作，可以按照时间顺序排列的 feed，黑白风的 UI，各方面都要比 Feedly 出色。一个好的软件和应用，交互的好坏直接决定了你打开它的次数。显然，我更愿意打开 Reeder，甚至愿意直接在 Reeder 进行阅读。而以往所有的阅读活动都是在稍后读应用中进行的。但是在我用了有将近两年的 RSS 工具，我都没有意识到，这样的一种阅读活动，其实不比微博，twitter，高出多少，本质依然是碎片式的学习，碎片式的阅读，其内容来源也都是来自互联网快速烘焙的产品，哪怕依靠大厂，哪怕是 New Yorker，the economist，每篇文章的保存时间会有多久呢？<a id="more"></a>思来想去，这些互联网上的内容服务，最合适的内容形式还是「新闻」，「泛科普」以及「情感类」或「针砭时弊」类文章。所以，也是在最近，就在买了 Reeder 应用之后，才开始注意到碎片式的学习给自己带来的种种消极影响。以前都不曾注意。在知乎问题「<a href="https://www.zhihu.com/question/20238280/answer/81597965" target="_blank" rel="external">碎片化学习的意义？碎片化学习的原因？碎片化学习的最终目标？</a>」中，排名第一的答案这样评价碎片式学习的：</p>
<blockquote>
<p>碎片化知识通过连续的新鲜内容，不断刺激你的大脑，让你始终处于「啊！又知道了新的东西」的喜悦中，从而难以自拔，这也就是我们难以抑制刷微博、刷朋友圈的缘故，因为我们只需要付出很少，就可以沉浸在「获得了新东西」的刺激里面。<strong>–V弦上的咏叹调</strong></p>
</blockquote>
<h2 id="RSS-使用指导"><a href="#RSS-使用指导" class="headerlink" title="RSS 使用指导"></a>RSS 使用指导</h2><p>在思考 RSS 功用时自然想到了所谓「浅层阅读」和「深层阅读」的问题，自己在笔记里关于这两种阅读是这样描述的：</p>
<blockquote>
<p>关于最近所遇到的问题，微博，rss，微信，twitter，等等这些碎片化工具，只能占生活的 10 %， 它们只是用来调解学习和锻炼的，同时作为信息收集的重要工具。这里主要收集的信息是，有价值的书，电影，音乐。关于工作内容的消息，无人机领域的变化等等。对于收集来的信息进行二次加工和整理，要么放进 instapaper 阅读，主要是练习语言。要么是在 onenote 里写成文章发表等。但信息收集只占 10%，所以，RSS 的位置就等同于微博的位置，远没有达到系统学习高度。其余的 90% 就是系统化学习，全身心的，枯燥的，需要不停思考，不停练习，不停重复，不停 debug 的学习过程。这过程会很累。完成任务，或间隙休息调整，读读微博或者 RSS。</p>
</blockquote>
<p>所以 RSS 不是一个好的学习工具，它只是一个信息收集的工具。而它的信息收集功能其实也可以被其他更有效的工具代替。而当把 RSS 拿作语言学习，则又是另外一回事。作为语言学习的 RSS，则是正襟危坐的坐在电脑前，认认真真记录，理解所阅读的每一句外文信息，并不时摘录好词好句。而后还要不断复习背诵。作为语言学习时，其实跟是不是通过 RSS 获取文章，和使用 RSS 已经没有什么关系了。</p>
<p>我在「少数派」看到了 JailbreakHum 对于 RSS 的这样的描述：</p>
<blockquote>
<p>但 RSS 不是这样的，RSS 重，真正的 RSS 使用者只会因为一个网站产出的大部分内容乃至频率都合自己口味，不想错过哪怕一条可能对自己有用的文章才会去订阅。我们订阅这样的网站，就是为了能够篇篇不漏地看这个网站产出的内容，起码要看标题。所以，就需要「未读数」来提醒我们有多少篇还没读，不清空未读数，我们会有一种压力和负罪感，我们会觉得该吸收的东西没有吸收到。<strong>–JailbreakHum</strong></p>
</blockquote>
<p>于是我就把我订阅的那些更新频率高的，自己基本很少打开看，或者本身兴趣不大的，都 unfollow 了。确实，RSS 里只适合订阅哪些你本人相当熟悉，不愿意错过每一篇文章的源。而不适合订阅那些更新频率相当高，自己又不熟悉的源。</p>
<h2 id="浅层阅读与深层阅读"><a href="#浅层阅读与深层阅读" class="headerlink" title="浅层阅读与深层阅读"></a>浅层阅读与深层阅读</h2><p>所以一般的阅读，我想能够分三个维度去考量：</p>
<ul>
<li>浅层阅读 - 微博，微信，RSS </li>
<li>深层阅读 - 小说，非虚构类文学，严肃文学，实体书，instapaper （有时兼顾语言学习之用）</li>
<li>专业学习的阅读 - 专业书籍，需要不断推演，思考，画重点，作笔记，并在之后不断回顾复习</li>
</ul>
<p>浅层阅读，不经过大脑，浏览关键字，主要思考信息是否有认真阅读的价值，这也是信息爆炸时代最基本的特。浅层，深层，专业系统化学习，其各自时间应该控制在 1:3:6 的比例。浅层阅读主要在移动设备上进行，深层阅读部分在平板，部分需要深度处理的内容在电脑上。专业只是学习需要，平板和电脑配合使用。平板作为辅助工具。</p>
<p>要对抗碎片划的学习，因为碎片化意味着不系统，意味着浮于表面，意味着如果长时间投入就是浪费时间。所以碎片化阅读最好的方式就是利用活动与活动的间隙进行。</p>
<h2 id="Habitica-带来的启示"><a href="#Habitica-带来的启示" class="headerlink" title="Habitica 带来的启示"></a>Habitica 带来的启示</h2><p>在知乎上看到的，之所以会感到信息爆炸，</p>
<ul>
<li>一，是目标不够明确，目标明确，找到的信息都是自己需要的信息，不会觉得信息很多。</li>
<li>二，是爱不深，兴趣不够。综合来看，应该尽量限制自己的兴趣，同时加强在专业方面的学习。</li>
</ul>
<p>对于第一点，自己最近在使用 <a href="https://habitica.com/" target="_blank" rel="external">Habitica</a> 时也是深有体会。Habitica 是一款把 to do list 这种效率软件包装成 RPG 游戏的应用。整体设计游戏化做的非常棒，在使用的过程中，自己也渐渐发现目标是非常重要的。以前人们常说，什么什么需要坚持，需要有毅力。在不断地失败又实践的过程中，我渐渐发现所谓的「坚持」不过是事情的结果，而不是事情的原因。我们对某件事的坚持，是因为我们有坚持它的动力，有目标，能坚持。而一般的效率软件则是帮助人们来找到目标的。而 Habitica 之所以比一般的效率软件好，就在与它的游戏化人生的概念。其实人生本身就是一场 RPG 角色扮演游戏。</p>
<p><img src="https://s-media-cache-ak0.pinimg.com/564x/de/99/d3/de99d3be6709eecc9ad13f762db29cd1.jpg" alt=""></p>
<p>今天是二〇一七年的第五天，我相信对于我，这一年一定会迎来一场创作的大爆发。我先在在使用 Habitica，而我也想不出会有什么原因会让我停下来不用它，大概会一直用下去吧，在名为「the Road of Life」的游戏中继续升级打怪。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;I-O-20-「有目标，能坚持！」&quot;&gt;&lt;a href=&quot;#I-O-20-「有目标，能坚持！」&quot; class=&quot;headerlink&quot; title=&quot;I/O #20: 「有目标，能坚持！」&quot;&gt;&lt;/a&gt;I/O #20: 「有目标，能坚持！」&lt;/h1&gt;&lt;p&gt;&lt;em&gt;2017.1.5&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;碎片式学习&quot;&gt;&lt;a href=&quot;#碎片式学习&quot; class=&quot;headerlink&quot; title=&quot;碎片式学习&quot;&gt;&lt;/a&gt;碎片式学习&lt;/h2&gt;&lt;p&gt;最近花了￥30买了 Reeder，一个 RSS 阅读应用。用起来，左划右划的快捷操作，可以按照时间顺序排列的 feed，黑白风的 UI，各方面都要比 Feedly 出色。一个好的软件和应用，交互的好坏直接决定了你打开它的次数。显然，我更愿意打开 Reeder，甚至愿意直接在 Reeder 进行阅读。而以往所有的阅读活动都是在稍后读应用中进行的。但是在我用了有将近两年的 RSS 工具，我都没有意识到，这样的一种阅读活动，其实不比微博，twitter，高出多少，本质依然是碎片式的学习，碎片式的阅读，其内容来源也都是来自互联网快速烘焙的产品，哪怕依靠大厂，哪怕是 New Yorker，the economist，每篇文章的保存时间会有多久呢？
    
    </summary>
    
      <category term="I/O" scheme="https://github.com/Reyshawn/reyshawn.github.io/categories/I-O/"/>
    
    
      <category term="反思" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/%E5%8F%8D%E6%80%9D/"/>
    
      <category term="Habitica" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/Habitica/"/>
    
      <category term="工具" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>I/O #19: Samorost 的银河历险记</title>
    <link href="https://github.com/Reyshawn/reyshawn.github.io/2016/12/17/I-O-19-Samorost-%E7%9A%84%E9%93%B6%E6%B2%B3%E5%8E%86%E9%99%A9%E8%AE%B0/"/>
    <id>https://github.com/Reyshawn/reyshawn.github.io/2016/12/17/I-O-19-Samorost-的银河历险记/</id>
    <published>2016-12-17T08:31:48.000Z</published>
    <updated>2017-11-03T14:35:28.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-O-19-Samorost-的银河历险记"><a href="#I-O-19-Samorost-的银河历险记" class="headerlink" title="I/O #19: Samorost 的银河历险记"></a>I/O #19: Samorost 的银河历险记</h1><p><em>2016.12.17</em></p>
<p>「Samorost」是来自捷克开发者团队  Amanita Design 的作品，中文译名「星际历险记」，如果之前有玩过他们的作品比如「Machinarium」，便能提前对他们的作品风格有所预设。「Samorost」和前作「Machinarium」风格相似，都是相同的鼠标点触操作模式，内含大量构思巧妙的关卡，人物沟通采用了会话气泡加动画的形式，暗藏的手绘攻略，以及故事核心都是一个子供向的童话。</p>
<p><strong>以下涉及剧透</strong><br><a id="more"></a></p>
<p>「Samorost」的主人公是一个拿着小喇叭的 Gnome，小喇叭在游戏中是非常重要的道具，所以许多的关卡都是和音乐有关的。如果有过基本的音乐训练，我想通过这些关卡可能会更加有趣。像我这样没有接受过乐理训练的人，在很多地方，背景音乐给的提示察觉不到，或者是察觉到了，但没办法将音乐转化为谱，转化为符号，分不清各个音阶大小，所以最后只能考暗藏的提示和网上给出的攻略来解密，这自然也损失了不少乐趣。</p>
<p>如果说前作「「Machinarium」」讲述的是一个英雄救美的故事，那么「Samorost」则是典型的太空探险故事，通过探险过程中的蛛丝马迹，发现了宇宙面临着巨大危机，而最后也是「英雄参上」，手擎宝剑，打败恶魔。Amanita Design 世界里的人物交流就像「三体」<br>星人一样，不需要文字，而是脑电波的直接传达。「Samorost」在前作的基础上，通过小喇叭，引入和「物」交流的概念，这里的「物」包含了动物，植物，昆虫，还有那些没有生命的星球，石头，门，雕刻图腾的柱子。它们时而讲述它们前世的遭遇，时而对当前的关卡给出提示，时而发出窸窣的声音。</p>
<p>正如电影中的旁白通常会被认为是最低级的叙事方式，游戏中的通篇文字，也会被认为叙事能力低级。电影的叙事是通过电影语言进行的，电影语言就是通过镜头，对白，剪辑，音乐来叙事。游戏则在电影的层面上是又高了一个维度，这个维度就是交互。游戏中经常出现的小电影，过场动画，使用的其实就是电影语言的叙事方法。而游戏超越电影的一面，则在于如何使用「交互」来进行叙事。在传统的 RPG （Role-playing game）中，人物通过对话引导，进入事先设计好的剧情点，引发剧情。因为「Samorost」似乎是完全丢掉了文字表达这一手段。所以用除文字之外的媒介来讲好这个故事，就显得非常高明。这其中包括历险中开始，主人公使用天文望远镜观察外太空，冒险的中段捡到了第二本故事书（漫画书），故事从这里出现反转，以及在冒险过程中逐渐明白了用小喇叭听声音的意义，就是去听那些有生命的物，无生命的物的倾诉。通过不断的倾听，故事也渐渐清晰起来，之前支离的线索开始慢慢能拼凑成一幅画，可以依稀辨认个中模样了。我想，「Samorost」带给我最大的乐趣，就是透过各种各样的符号，提示来进行解谜。还有就是最后把所有线索串起来的时候，那种恍然大悟的感觉。</p>
<p><img src="http://samorost3.net/img/big/samorost-3-red-cave.jpg" alt="地下洞穴"></p>
<p><img src="http://samorost3.net/img/big/samorost-3-newts.jpg" alt="巨大昆虫"></p>
<p>最后说一下游戏中几个，我个人到目前还有所回味的点。一个是第一次在自己家楼顶，使用天文望远镜望星星，当时不禁就想到了『三体』里的三体星的瞭望员，那位整日都在百无聊赖的看星星，然后某一天收到的来自地球的叶文洁的消息，最后回信警告「不要回答！不要回答！不要回答！」。第二个是自己驾驶飞船来到一个白色的星球上，星球上有一颗枯树，倾听它的声音，它告诉我们，它是如何被一个有着三个头的机械怪物烧掉，吃掉灵魂，变成如今这般模样的。而在下一个星球，也终于找到了故事的下册，也终于明白了三头机械怪物的来历。第三个是游戏蕴含的所有音乐，和音乐相关的关卡。在小黑人所在的那个星球上，调了很多遍才终于让四个小黑人同样节奏的唱起歌来，那一刻，整个情绪都起来了。当然，还有巨大的虫子，麦草，乌龟，花朵，果实，僧侣等等，这些意象在一起，共同编织一个「小王子」般的童话故事。</p>
<p>最后，维基百科里写出了开发者创作游戏时参考的一些电影，但都是捷克导演的作品，自己本身对捷克电影不太了解。这里列出的两部，可以看到和游戏有明显的相关性。</p>
<p>相关电影</p>
<ul>
<li><a href="https://movie.douban.com/subject/1940670/?from=subject-page" target="_blank" rel="external">Vynález zkázy ( The Fabulous World of Jules Verne ) - Karel Zeman</a></li>
<li><a href="https://www.wikiwand.com/en/Hedgehog_in_the_Fog" target="_blank" rel="external">Hedgehog in the Fog</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;I-O-19-Samorost-的银河历险记&quot;&gt;&lt;a href=&quot;#I-O-19-Samorost-的银河历险记&quot; class=&quot;headerlink&quot; title=&quot;I/O #19: Samorost 的银河历险记&quot;&gt;&lt;/a&gt;I/O #19: Samorost 的银河历险记&lt;/h1&gt;&lt;p&gt;&lt;em&gt;2016.12.17&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;「Samorost」是来自捷克开发者团队  Amanita Design 的作品，中文译名「星际历险记」，如果之前有玩过他们的作品比如「Machinarium」，便能提前对他们的作品风格有所预设。「Samorost」和前作「Machinarium」风格相似，都是相同的鼠标点触操作模式，内含大量构思巧妙的关卡，人物沟通采用了会话气泡加动画的形式，暗藏的手绘攻略，以及故事核心都是一个子供向的童话。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下涉及剧透&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="I/O" scheme="https://github.com/Reyshawn/reyshawn.github.io/categories/I-O/"/>
    
    
      <category term="游戏" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="故事" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>I/O #18: 名为丢失的记忆</title>
    <link href="https://github.com/Reyshawn/reyshawn.github.io/2016/09/12/I-O-18-%E5%90%8D%E4%B8%BA%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%AE%B0%E5%BF%86/"/>
    <id>https://github.com/Reyshawn/reyshawn.github.io/2016/09/12/I-O-18-名为丢失的记忆/</id>
    <published>2016-09-12T01:59:19.000Z</published>
    <updated>2017-11-03T14:35:28.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="I-O-18-名为丢失的记忆"><a href="#I-O-18-名为丢失的记忆" class="headerlink" title="I/O #18: 名为丢失的记忆"></a>I/O #18: 名为丢失的记忆</h1><ul>
<li><a href="https://www.wikiwand.com/en/Kaiba" target="_blank" rel="external">『カイバ』</a></li>
<li>如何在 AI 中加入人的思考和情感？</li>
</ul>
<p>『カイバ』(读作：Kaiba)可能会是一部我目前看过的汤浅的所有作品中，最喜欢的一部，喜欢的程度已经超过了『ケモノヅメ』(读作：Kemonozume)。在之前我的另一个系列文章<a href="https://app.yinxiang.com/shard/s6/nl/1479304/bfbcd12c-218a-4d89-b76d-77aee6d8d9ad" target="_blank" rel="external">「间隔年日记 #008: 人体机器」</a>中，我曾经得到了这样的结论：<br><a id="more"></a></p>
<blockquote>
<p>小時候，也有過像蘇菲那樣思考「我是誰？」這樣終極的哲學命題。前幾日我似乎終於找到了答案。當我在問「我是誰？」時，我其實是想知道我的意識從何而來，爲什麼我是屬於這具軀體而不是屬於另外一具軀體。我最後得以確定，所有關於「人」意識的問題都要回歸于記憶，有了記憶才有線性時間的概念，進而在線性時間上衍生出事件，以及出現因果概念，因果概念加上線性時間上的事件，就是更加抽象的思考。</p>
</blockquote>
<p>在『カイバ』中，作者和我这一想法不谋而合，并且通过将记忆进行实体化，可移植，可贩卖，由此引申一个庞大的世界设定。在这个世界里，因为记忆可以移植，肉体不再具有意义。有钱人将记忆不断载入健康的身体，用掉的身体则丢掉回收，以此达到永生的目的。穷人迫不得已通过贩卖自己的身体来度日维生，有时甚至要贩卖自己学过的知识。删除痛苦的记忆，下载快乐的记忆。这些看似超现实下的科幻描写，其实也在当下不断发生。你还记得你上次做爱是什么时候吗？上一次自慰是什么时候？上次和女友/男友争吵是什么原因？这些不愉快的记忆早已经忘的一干二净。但是，是不是能清晰的记得，高考后的那天晚上做了什么，还记得大四最后毕业那些天，一起爬山，在山上看看星星的情景。高兴的，快乐的记忆被我们一遍又一遍想起，在脑中的那段脑回路，被一遍遍的补给营养得到加强。而那些痛苦的，伤心的，羞耻的，不堪的记忆，我们希望它消失，希望它从来没有发生过，希望脑中那段回路消失，消失，消失。我们愿意记起那些快乐的回忆，希望忘掉不好的事情。</p>
<blockquote>
<p>海马体，Hippocampus，是组成大脑边缘系统的一部分，位于大脑皮质下方，担当着关于短期记忆，长期记忆和空间定位的作用。</p>
</blockquote>
<p>在电影『Who Am I - Kein System ist sicher』中，导演试图告诉我们，我们更愿意相信我们眼中看到的事情。在本文的主题下，可以解读为，我们更愿意相信我们自己的记忆。但有时候记忆会撒谎，记忆也会被篡改，记忆会像『Memento』里 Leonard 那样，会被打破成碎片。而与之相对的，事实就是事实，是客观存在发生过的事。记忆是事实的一面镜子，有时候能照出事实，有时候只能照出一部分，有时候甚至会导向与事实相反的方向。我有时候会很洁癖，手机的屏幕，电脑的屏幕，平板的屏幕擦了又擦，擦的跟新的一样。但无论怎么擦，也擦不掉我已经使用了三年零六个月的事实了。在做了坏事之后，希望忘掉不愉快，一切从新开始。这大概是我以后需要更正的态度，那就是，我不应该刻意忘掉那些给我带来伤痛的回忆，所有的一切，无论好的，坏的，都实实在在的曾经发生在我身上。我想要采取的态度是，希望自己的记忆能最大程度的还原现实，还原真实。</p>
<p>如何让一个机器人更像人，如何引入人的思考和人的情感？我想了下，只需要加入和海马体类似的存储机制。之前还在思考，为了情感的需要，是不是需要性欲。想了想，情感和性欲终究是两件不同的事情，性欲是生殖的需求，而情感，是由于在一起时间久了以后所产生的依恋，羁绊。这种依恋，羁绊自是由时间产生，也是由记忆产生。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;I-O-18-名为丢失的记忆&quot;&gt;&lt;a href=&quot;#I-O-18-名为丢失的记忆&quot; class=&quot;headerlink&quot; title=&quot;I/O #18: 名为丢失的记忆&quot;&gt;&lt;/a&gt;I/O #18: 名为丢失的记忆&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Kaiba&quot;&gt;『カイバ』&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如何在 AI 中加入人的思考和情感？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;『カイバ』(读作：Kaiba)可能会是一部我目前看过的汤浅的所有作品中，最喜欢的一部，喜欢的程度已经超过了『ケモノヅメ』(读作：Kemonozume)。在之前我的另一个系列文章&lt;a href=&quot;https://app.yinxiang.com/shard/s6/nl/1479304/bfbcd12c-218a-4d89-b76d-77aee6d8d9ad&quot;&gt;「间隔年日记 #008: 人体机器」&lt;/a&gt;中，我曾经得到了这样的结论：&lt;br&gt;
    
    </summary>
    
      <category term="I/O" scheme="https://github.com/Reyshawn/reyshawn.github.io/categories/I-O/"/>
    
    
      <category term="电影" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="Anime" scheme="https://github.com/Reyshawn/reyshawn.github.io/tags/Anime/"/>
    
  </entry>
  
</feed>
